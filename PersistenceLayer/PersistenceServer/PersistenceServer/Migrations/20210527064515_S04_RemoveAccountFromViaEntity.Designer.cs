// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PersistenceServer.Data;

namespace PersistenceServer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210527064515_S04_RemoveAccountFromViaEntity")]
    partial class S04_RemoveAccountFromViaEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("PersistenceServer.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApplicationPassword")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.Property<int>("viaId")
                        .HasColumnType("integer");

                    b.HasKey("AccountId");

                    b.HasIndex("type");

                    b.HasIndex("viaId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PersistenceServer.Models.Campus", b =>
                {
                    b.Property<string>("City")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Street")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("postcode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("City", "Street", "PostCode");

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("PersistenceServer.Models.CreditCard", b =>
                {
                    b.Property<string>("CreditCardNumber")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<float>("AmountOfMoney")
                        .HasColumnType("real");

                    b.Property<string>("ExpirationMonth")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("ExpirationYear")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("fname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("lname");

                    b.Property<int>("SecurityCode")
                        .HasColumnType("integer");

                    b.Property<int?>("accountId")
                        .HasColumnType("integer");

                    b.HasKey("CreditCardNumber");

                    b.HasIndex("accountId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("PersistenceServer.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PersistenceServer.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("receiver")
                        .HasColumnType("integer");

                    b.Property<int>("sender")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("receiver");

                    b.HasIndex("sender");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("PersistenceServer.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PersistenceServer.Models.ViaEntity", b =>
                {
                    b.Property<int>("ViaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("ViaId");

                    b.ToTable("ViaEntities");
                });

            modelBuilder.Entity("PersistenceServer.Models.Facility", b =>
                {
                    b.HasBaseType("PersistenceServer.Models.ViaEntity");

                    b.Property<string>("CampusCity")
                        .HasColumnType("character varying(256)");

                    b.Property<string>("CampusPostCode")
                        .HasColumnType("character varying(4)");

                    b.Property<string>("CampusStreet")
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasIndex("CampusCity", "CampusStreet", "CampusPostCode");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("PersistenceServer.Models.Member", b =>
                {
                    b.HasBaseType("PersistenceServer.Models.ViaEntity");

                    b.Property<long>("Cpr")
                        .HasMaxLength(10)
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("fname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("lname");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("PersistenceServer.Models.Account", b =>
                {
                    b.HasOne("PersistenceServer.Models.Role", "AccountType")
                        .WithMany()
                        .HasForeignKey("type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceServer.Models.ViaEntity", "ViaEntity")
                        .WithMany()
                        .HasForeignKey("viaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("ViaEntity");
                });

            modelBuilder.Entity("PersistenceServer.Models.CreditCard", b =>
                {
                    b.HasOne("PersistenceServer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("accountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PersistenceServer.Models.Transaction", b =>
                {
                    b.HasOne("PersistenceServer.Models.Account", "ReceiverAccount")
                        .WithMany()
                        .HasForeignKey("receiver")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceServer.Models.Account", "SenderAccount")
                        .WithMany()
                        .HasForeignKey("sender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiverAccount");

                    b.Navigation("SenderAccount");
                });

            modelBuilder.Entity("PersistenceServer.Models.Facility", b =>
                {
                    b.HasOne("PersistenceServer.Models.ViaEntity", null)
                        .WithOne()
                        .HasForeignKey("PersistenceServer.Models.Facility", "ViaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersistenceServer.Models.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusCity", "CampusStreet", "CampusPostCode");

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("PersistenceServer.Models.Member", b =>
                {
                    b.HasOne("PersistenceServer.Models.ViaEntity", null)
                        .WithOne()
                        .HasForeignKey("PersistenceServer.Models.Member", "ViaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
